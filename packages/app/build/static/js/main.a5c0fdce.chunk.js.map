{"version":3,"sources":["../../src/components/box/box.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Box","styled","boxSizing","minWidth","compose","App","className","bg","mb","Boolean","window","location","hostname","match","render","domElement","navigator","userAgent","reactSnapshotRender","html","sheet","ServerStyleSheet","ReactDOMServer","renderToString","instance","getStyleTags","error","console","seal","innerHTML","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAwBaA,EAAMC,QACjB,CACEC,UADF,aAEEC,SAAU,GAEZC,YAAQ,EAAD,kBALUH,MCXJI,EAVO,WACpB,OACE,yBAAKC,UAAU,OACf,kBAACN,EAAD,CAAKO,GAAG,YAAYC,GAAI,GAAxB,UCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,uCAeO,IAAMC,EAAS,SAACC,GACrB,GAAIC,UAAUC,UAAUJ,MAAM,cAAgBH,QAAUA,OAAOQ,oBAAqB,CAClF,IACIC,EADEC,EAAQ,IAAIC,IAElB,IACEF,EAAOG,IAAeC,eACpB,kBAAC,IAAD,CAAmBH,MAAOA,EAAMI,UAC9B,kBAAC,EAAD,QAGcJ,EAAMK,eACxB,MAAOC,GAEPC,QAAQD,MAAMA,GAThB,QAWEN,EAAMQ,OACNb,EAAWc,UAAYV,EACvBT,OAAOQ,4BAGTY,IAAShB,OAAO,kBAAC,EAAD,MAASC,IAG7BD,EAAOiB,SAASC,eAAe,SDqGzB,kBAAmBhB,WACrBA,UAAUiB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a5c0fdce.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport {\n  compose,\n  space,\n  layout,\n  flexbox,\n  border,\n  position,\n  color,\n  SpaceProps,\n  ColorProps,\n  LayoutProps,\n  FlexboxProps,\n  BorderProps,\n  PositionProps,\n} from 'styled-system';\n\ntype BoxProps = SpaceProps &\n  ColorProps &\n  LayoutProps &\n  FlexboxProps &\n  BorderProps &\n  PositionProps;\n\nexport const Box = styled.div<BoxProps>(\n  {\n    boxSizing: 'border-box',\n    minWidth: 0,\n  },\n  compose(space, color, layout, flexbox, border, position)\n);\n","import React from 'react';\nimport { Box } from 'ds-seed';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n    <Box bg=\"highlight\" mb={4}>\n      test\n    </Box>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\nimport { render as reactSnapshotRender } from 'react-snapshot';\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndeclare global {\n  interface Window {\n    reactSnapshotRender: any;\n  }\n}\n\nexport const render = (domElement: any) => {\n  if (navigator.userAgent.match(/Node\\.js/i) && window && window.reactSnapshotRender) {\n    const sheet = new ServerStyleSheet();\n    let html;\n    try {\n      html = ReactDOMServer.renderToString(\n        <StyleSheetManager sheet={sheet.instance}>\n          <App />\n        </StyleSheetManager>,\n      );\n      const styleTags = sheet.getStyleTags(); // or sheet.getStyleElement();\n    } catch (error) {\n      // handle error\n      console.error(error);\n    } finally {\n      sheet.seal();\n      domElement.innerHTML = html;\n      window.reactSnapshotRender();\n    }\n  } else {\n    ReactDOM.render(<App />, domElement)\n  }\n}\nrender(document.getElementById('root'));\n\n// renderToString(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}